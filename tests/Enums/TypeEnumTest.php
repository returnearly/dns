<?php

declare(strict_types=1);

use ReturnEarly\Dns\Enums\TypeEnum;

it('can get the type name', function (TypeEnum $enum, string $name) {
    expect($enum->toTypeName())->toBe($name);
})->with([
    [TypeEnum::A, 'A'],
    [TypeEnum::AAAA, 'AAAA'],
    [TypeEnum::AFSDB, 'AFSDB'],
    [TypeEnum::ANY, 'ANY'],
    [TypeEnum::APL, 'APL'],
    [TypeEnum::AXFR, 'AXFR'],
    [TypeEnum::CAA, 'CAA'],
    [TypeEnum::CERT, 'CERT'],
    [TypeEnum::CNAME, 'CNAME'],
    [TypeEnum::DHCID, 'DHCID'],
    [TypeEnum::DLV, 'DLV'],
    [TypeEnum::DNAME, 'DNAME'],
    [TypeEnum::DNSKEY, 'DNSKEY'],
    [TypeEnum::DS, 'DS'],
    [TypeEnum::HIP, 'HIP'],
    [TypeEnum::IPSECKEY, 'IPSECKEY'],
    [TypeEnum::IXFR, 'IXFR'],
    [TypeEnum::KEY, 'KEY'],
    [TypeEnum::KX, 'KX'],
    [TypeEnum::LOC, 'LOC'],
    [TypeEnum::MX, 'MX'],
    [TypeEnum::NAPTR, 'NAPTR'],
    [TypeEnum::NS, 'NS'],
    [TypeEnum::NSEC, 'NSEC'],
    [TypeEnum::NSEC3, 'NSEC3'],
    [TypeEnum::NSEC3PARAM, 'NSEC3PARAM'],
    [TypeEnum::PTR, 'PTR'],
    [TypeEnum::RP, 'RP'],
    [TypeEnum::RRSIG, 'RRSIG'],
    [TypeEnum::SIG, 'SIG'],
    [TypeEnum::SOA, 'SOA'],
    [TypeEnum::SPF, 'SPF'],
    [TypeEnum::SRV, 'SRV'],
    [TypeEnum::SSHFP, 'SSHFP'],
    [TypeEnum::TA, 'TA'],
    [TypeEnum::TKEY, 'TKEY'],
    [TypeEnum::TSIG, 'TSIG'],
    [TypeEnum::TXT, 'TXT'],
]);

it('can get the record type id', function (TypeEnum $enum, int $code) {
    expect($enum->toTypeId())->toBe($code);
})->with([
    [TypeEnum::A, 1],
    [TypeEnum::AAAA, 28],
    [TypeEnum::AFSDB, 18],
    [TypeEnum::ANY, 255],
    [TypeEnum::APL, 42],
    [TypeEnum::AXFR, 252],
    [TypeEnum::CAA, 257],
    [TypeEnum::CERT, 37],
    [TypeEnum::CNAME, 5],
    [TypeEnum::DHCID, 49],
    [TypeEnum::DLV, 32769],
    [TypeEnum::DNAME, 39],
    [TypeEnum::DNSKEY, 48],
    [TypeEnum::DS, 43],
    [TypeEnum::HIP, 55],
    [TypeEnum::IPSECKEY, 45],
    [TypeEnum::IXFR, 251],
    [TypeEnum::KEY, 25],
    [TypeEnum::KX, 36],
    [TypeEnum::LOC, 29],
    [TypeEnum::MX, 15],
    [TypeEnum::NAPTR, 35],
    [TypeEnum::NS, 2],
    [TypeEnum::NSEC, 47],
    [TypeEnum::NSEC3, 50],
    [TypeEnum::NSEC3PARAM, 51],
    [TypeEnum::PTR, 12],
    [TypeEnum::RP, 17],
    [TypeEnum::RRSIG, 46],
    [TypeEnum::SIG, 24],
    [TypeEnum::SOA, 6],
    [TypeEnum::SPF, 99],
    [TypeEnum::SRV, 33],
    [TypeEnum::SSHFP, 44],
    [TypeEnum::TA, 32768],
    [TypeEnum::TKEY, 249],
    [TypeEnum::TSIG, 250],
    [TypeEnum::TXT, 16],
]);

it('can turn a string into an enum', function (string $input, TypeEnum $enum) {
    expect(TypeEnum::fromTypeName($input))->toBe($enum);
})->with([
    ['A', TypeEnum::A],
    ['AAAA', TypeEnum::AAAA],
    ['AFSDB', TypeEnum::AFSDB],
    ['ANY', TypeEnum::ANY],
    ['APL', TypeEnum::APL],
    ['AXFR', TypeEnum::AXFR],
    ['CAA', TypeEnum::CAA],
    ['CERT', TypeEnum::CERT],
    ['CNAME', TypeEnum::CNAME],
    ['DHCID', TypeEnum::DHCID],
    ['DLV', TypeEnum::DLV],
    ['DNAME', TypeEnum::DNAME],
    ['DNSKEY', TypeEnum::DNSKEY],
    ['DS', TypeEnum::DS],
    ['HIP', TypeEnum::HIP],
    ['IPSECKEY', TypeEnum::IPSECKEY],
    ['IXFR', TypeEnum::IXFR],
    ['KEY', TypeEnum::KEY],
    ['KX', TypeEnum::KX],
    ['LOC', TypeEnum::LOC],
    ['MX', TypeEnum::MX],
    ['NAPTR', TypeEnum::NAPTR],
    ['NS', TypeEnum::NS],
    ['NSEC', TypeEnum::NSEC],
    ['NSEC3', TypeEnum::NSEC3],
    ['NSEC3PARAM', TypeEnum::NSEC3PARAM],
    ['PTR', TypeEnum::PTR],
    ['RP', TypeEnum::RP],
    ['RRSIG', TypeEnum::RRSIG],
    ['SIG', TypeEnum::SIG],
    ['SOA', TypeEnum::SOA],
    ['SPF', TypeEnum::SPF],
    ['SRV', TypeEnum::SRV],
    ['SSHFP', TypeEnum::SSHFP],
    ['TA', TypeEnum::TA],
    ['TKEY', TypeEnum::TKEY],
    ['TSIG', TypeEnum::TSIG],
    ['TXT', TypeEnum::TXT],
]);

it('can turn a type id into a record', function (int $code, TypeEnum $enum) {
    expect(TypeEnum::fromTypeId($code))->toBe($enum);
})->with([
    [1, TypeEnum::A],
    [28, TypeEnum::AAAA],
    [18, TypeEnum::AFSDB],
    [255, TypeEnum::ANY],
    [42, TypeEnum::APL],
    [252, TypeEnum::AXFR],
    [257, TypeEnum::CAA],
    [37, TypeEnum::CERT],
    [5, TypeEnum::CNAME],
    [49, TypeEnum::DHCID],
    [32769, TypeEnum::DLV],
    [39, TypeEnum::DNAME],
    [48, TypeEnum::DNSKEY],
    [43, TypeEnum::DS],
    [55, TypeEnum::HIP],
    [45, TypeEnum::IPSECKEY],
    [251, TypeEnum::IXFR],
    [25, TypeEnum::KEY],
    [36, TypeEnum::KX],
    [29, TypeEnum::LOC],
    [15, TypeEnum::MX],
    [35, TypeEnum::NAPTR],
    [2, TypeEnum::NS],
    [47, TypeEnum::NSEC],
    [50, TypeEnum::NSEC3],
    [51, TypeEnum::NSEC3PARAM],
    [12, TypeEnum::PTR],
    [17, TypeEnum::RP],
    [46, TypeEnum::RRSIG],
    [24, TypeEnum::SIG],
    [6, TypeEnum::SOA],
    [99, TypeEnum::SPF],
    [33, TypeEnum::SRV],
    [44, TypeEnum::SSHFP],
    [32768, TypeEnum::TA],
    [249, TypeEnum::TKEY],
    [250, TypeEnum::TSIG],
    [16, TypeEnum::TXT],
]);

it('can get the rfc for the type', function (TypeEnum $enum) {
    expect($enum->toRFC())->not->toBeEmpty();
})->with(TypeEnum::collection());
